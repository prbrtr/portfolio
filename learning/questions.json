[
    {
        "question": "Memory management in python:",
        "answers": [
            "Python Memory Management:\nPython uses two main types of memory: stack memory and heap memory.\n\nStack Memory:\nPurpose: Stack memory is used for static memory allocation. It stores local variables and function call information.\nCharacteristics: It operates in a Last-In-First-Out (LIFO) manner. When a function is called, a new stack frame is created to store its local variables and other information. Once the function returns, the stack frame is popped off, and the memory is reclaimed.\nUsage: Ideal for small, temporary data like integers and function calls.\nHeap Memory\nPurpose: Heap memory is used for dynamic memory allocation. It stores objects and data structures that need to persist beyond the scope of a single function call.\nCharacteristics: Unlike stack memory, heap memory is not organized in a specific order. It is managed by Python\u2019s memory manager and garbage collector.\nUsage: Suitable for larger collections of data, such as lists, dictionaries, and custom objects.",
            "\nReference Counting:\nMechanism: Python uses reference counting as its primary memory management technique. Each object maintains a count of how many references point to it.\nProcess: When an object\u2019s reference count drops to zero, it means the object is no longer in use, and the memory can be reclaimed.\nGarbage Collection:\nMechanism: Python\u2019s garbage collector automatically manages memory by reclaiming unused objects. It uses reference counting and cyclic garbage collection to identify and clean up unused data.\nProcess: For cyclic references, Python uses a cyclic garbage collector to detect and break these cycles.\nMemory Management Techniques\nMemory Pools:\nFunction: Python uses memory pools to manage small objects (up to 512 bytes). These pools are pre-allocated chunks of memory, divided into blocks that store objects of similar sizes.\nBenefit: This approach reduces memory fragmentation and improves allocation performance by reusing memory blocks when objects are deallocated.\nBlock Allocation:\nFunction: For larger objects (over 512 bytes), Python uses block allocation. This strategy allocates memory blocks directly from the heap.\nBenefit: It ensures efficient memory usage for large objects."
        ]
    },
    {
        "question": "What is a module in python?",
        "answers": [
            "A module is a file containing Python code. It can define functions, classes and veriables that can be reused in other python scripts using import.",
            ""
        ]
    },
    {
        "question": "What is a virtual enviroment in python? Why it is used?",
        "answers": [
            "A virtual enviroment is a isolated python environment that allows you to lanage dependencies for different project indepedently.it is used to avoid conflicts between prject dependencies.",
            ""
        ]
    },
    {
        "question": "List vs Tuple?",
        "answers": [
            "List:\\n\u2022 Mutable: Can be modified after creation (e.g., add/remove elements).\\n\u2022 Memory: It's slower than tuple.\\n\u2022 Syntax: Square brackets [].\\n\u2022 Example: my_list = [1, 2, 3]\\n\\nTuple:\\n\u2022 Immutable: Cannot be modified after creation.\\n\u2022 Memory: It's faster than list.\\n\u2022 Syntax: Parentheses ().\\n\u2022 Example: my_tuple = (1, 2, 3)",
            ""
        ]
    },
    {
        "question": "Deep copy vs shallow copy.",
        "answers": [
            "A shallow copy duplicates the values but keeps references to the same memory addresses, so changing the shallow copy\u2019s values affects the original object. In contrast, a deep copy duplicates the values to different memory addresses, so changes to the deep copy do not affect the original object.",
            "import copy\n\n# Original list\noriginal_list = [1, 2, [3, 4]]\n\n# Shallow copy\nshallow_copied_list = copy.copy(original_list)\n# Deep copy\ndeep_copied_list = copy.deepcopy(original_list)\n\n# Modify the nested list in the shallow copy\nshallow_copied_list[2][0] = 'shallow'\n\n# Modify the nested list in the deep copy\ndeep_copied_list[2][0] = 'deep'\n\nprint(\"Original list:\", original_list)\nprint(\"Shallow copied list:\", shallow_copied_list)\nprint(\"Deep copied list:\", deep_copied_list)\n\n"
        ]
    },
    {
        "question": "Explain recursion in python?",
        "answers": [
            "Recursion is a technique where a function calls itself. it's usefull for solving problem that can be broken down into smaller,sub-problem.",
            "def factorial(n):\n    if n==0 or n==1: \n        return 1\n    else: \n        return n*factorial(n-1)\nresult = factorial(5)\nprint(\"Factorial of 5:\",result)\n\nOutput: Factorial of 5: 120"
        ]
    },
    {
        "question": "What is a Generator?",
        "answers": [
            "A generator is a function that produce a sequence of value lazily one at a time rather than storing them all in memory at once as a list. genrator uses yeild keyword to produce the value.",
            "def generator_new(n):\n    if n % 2==0:\n        yield n\nfor i in range(5):\n    gen=generator_new(i)\n    try:\n        print(next(gen))\n    except:\n        print(\"odd\")\n\n"
        ]
    },
    {
        "question": "what is iterator?",
        "answers": [
            "An iterator iterates over an object when it is used in a loop or when the next() function is called on it.",
            "my_list = [1, 2, 3]\nfor item in my_list:\n    print(item)\n\n"
        ]
    },
    {
        "question": "What is enumerate keyword?",
        "answers": [
            "The enumerate keword is used to iterate over both the index and the value of an iterable within a loop.",
            "fruits = ['apple','banana','cherry']\nfor index, value in enumerate(fruits):\n    print(index,value)\n\nOutput: 0 apple\n1 banana\n2 cherry"
        ]
    },
    {
        "question": "What is a map function?",
        "answers": [
            "The map() function in Python is used to apply a given function to all items in an iterable (eg. a list) and returns an iterable map object. It takes a function in one or more iterables as arguments and applies the function to each corresponding element.",
            "numbers=[1,2,3,4]\nsquared = map(lambda x:x**2,numbers)\nresult = list(sqaured)\n\nError: name 'sqaured' is not defined"
        ]
    },
    {
        "question": "what is a Lambda function?",
        "answers": [
            "In python a Lambda function also known as an anonymous function is a small unnamed function defined using the Lambda keyword it is often used for short simple operations and can take multiple arguments but can only have one expression",
            ""
        ]
    },
    {
        "question": "What is a zip function?",
        "answers": [
            "The zip() function in Python is a built-in function that allows you to combine elements from multiple iterables (like lists, tuples, etc.) into tuples. It creates an iterator that aggregates elements from each of the iterables.",
            "keys = [\"name\", \"age\", \"city\"]\nvalues = [\"Alice\", 28, \"New York\"]\n\ndictionary = dict(zip(keys, values))\nprint(dictionary)  # Output: {'name': 'Alice', 'age': 28, 'city': 'New York'}\n\nOutput: {'name': 'Alice', 'age': 28, 'city': 'New York'}"
        ]
    },
    {
        "question": "What is a Decorator?",
        "answers": [
            "A decorator is a function that can modify the behaviour of another function or method. It is often used to add funtionality to function oe method dynamically.",
            "def my_decorator(func):\n    def wrapper():\n        print(\"Something is happening before the function is called.\")\n        func()\n        print(\"Something is happening after the function is called.\")\n    return wrapper\n\n@my_decorator\ndef say_hello():\n    print(\"Hello!\")\n\nsay_hello()\n\nOutput: Something is happening before the function is called.\nHello!\nSomething is happening after the function is called."
        ]
    },
    {
        "question": "What is class method and static method?",
        "answers": [
            "A static method in a class functions like a regular function and does not modify the class or instance state, nor does it take self or cls as parameters. In contrast, a class method takes cls as an argument, which refers to the class itself, allowing it to modify class-level state that applies across all instances.",
            "class MyClass:\n    class_variable = 0\n\n    def __init__(self, instance_variable):\n        self.instance_variable = instance_variable\n\n    @classmethod\n    def class_method(cls):\n        cls.class_variable += 1\n        print(f\"Class variable is now {cls.class_variable}\")\n\n    @staticmethod\n    def static_method():\n        print(\"This is a static method. It doesn't modify class or instance state.\")\n\n# Example usage\nobj1 = MyClass(1)\nobj2 = MyClass(2)\n\n# Calling class method\nMyClass.class_method()  # Output: Class variable is now 1\nobj1.class_method()     # Output: Class variable is now 2\n\n# Calling static method\nMyClass.static_method()  # Output: This is a static method. It doesn't modify class or instance state.\nobj1.static_method()     # Output: This is a static method. It doesn't modify class or instance state.\n\nOutput: Class variable is now 1\nClass variable is now 2\nThis is a static method. It doesn't modify class or instance state.\nThis is a static method. It doesn't modify class or instance state."
        ]
    },
    {
        "question": "What is a class in python ?",
        "answers": [
            "A class is a blueprint for creating objects.It defines attributes and methods that the objects will have.",
            ""
        ]
    },
    {
        "question": "what is a self keyword in python ?",
        "answers": [
            "self is a reference to the instance of the class. It is used to access instance variables and methods within the class.",
            ""
        ]
    },
    {
        "question": "Explain the __init__ method in python ?",
        "answers": [
            "The __init__method in python is a special method used for initilizating object. Its called when the object is created.",
            ""
        ]
    },
    {
        "question": "What is super()?",
        "answers": [
            "super() is used to call a method from the parent class. its often used in child class's overridden method.",
            "class Animal:\n    def speak(self):\n        print(\"Animal speak\")\nclass Dog(Animal):\n     def speak(self):\n         super().speak()\n         print(\"Dog barks\")\n"
        ]
    },
    {
        "question": "Explain encapsulation",
        "answers": [
            "Encapsulation is the building of data and the methods that operate on that data within a single unit, i.e class. It restricts access to some of the objects components, promoting data hiding and abstraction .",
            "class Example:\n    def __init__(self):\n        self.public_var = \"I am public\"\n        self._protected_var = \"I am protected\"\n        self.__private_var = \"I am private\"\n\n    def public_method(self):\n        return \"This is a public method\"\n\n    def _protected_method(self):\n        return \"This is a protected method\"\n\n    def __private_method(self):\n        return \"This is a private method\"\n\n    def access_private_method(self):\n        return self.__private_method()\n\nexample = Example()\n\nprint(example.public_var)\nprint(example.public_method())\n\nprint(example._protected_var)\nprint(example._protected_method())\n\nprint(example.access_private_method())\n\nOutput: I am public\nThis is a public method\nI am protected\nThis is a protected method\nThis is a private method"
        ]
    },
    {
        "question": "Explain the concept of inheritance?",
        "answers": [
            "Inheritance is a mechanism where a new class inherits properties and behaviour from an existing class.It promotes code reuse and allows the creation of hierarchy classes.",
            ""
        ]
    },
    {
        "question": "Polymorphism with Inheritance:",
        "answers": [
            "In Python, Polymorphism lets us define methods in the child class that have the same name as the methods in the parent class. In inheritance, the child class inherits the methods from the parent class. However, it is possible to modify a method in a child class that it has inherited from the parent class. This is particularly useful in cases where the method inherited from the parent class doesn\u2019t quite fit the child class. In such cases, we re-implement the method in the child class. This process of re-implementing a method in the child class is known as Method Overriding.",
            ""
        ]
    },
    {
        "question": "What is polymorphism?",
        "answers": [
            "Polymorphism allows objects to be treated as instances of their parent class rather than actual class.It allows a single interface to represent different types of objects",
            ""
        ]
    },
    {
        "question": "How can you achieve multiple inheritance in python ?",
        "answers": [
            "Multiple inheretance is acheved when a class inherits from more than one base clas. Its done by specifying multiple class name in class defination",
            ""
        ]
    },
    {
        "question": "Explain method overridding and overloading in python.",
        "answers": [
            "Method overriding occurs when a subclass provides a method which been already implemented by super class. Method over loading is having the same method names but passing different parameters (python does not suppports method overloading .",
            ""
        ]
    },
    {
        "question": "what is abstract class in python?",
        "answers": [
            "An abstract class is a class that cannot be instantiated and typically contains abstracts methods, which are method without implementation.",
            ""
        ]
    },
    {
        "question": "What is a meta class?",
        "answers": [
            "A metaclass is a class that creates classes. Classes themselves are instances of metaclasses.A metaclass in Python is a class of a class that defines how a class behaves. In other words, a metaclass is a blueprint for classes, just as a class is a blueprint for objects. Metaclasses allow you to control the creation and behavior of classes.",
            ""
        ]
    },
    {
        "question": "What is monkey patching ?",
        "answers": [
            "Monkey patching is a technique in Python that allows you to modify or extend the behavior of existing modules, classes, or functions at runtime without changing the original source code. This can be particularly useful for testing, debugging, or adding temporary fixes.",
            "class Robot:\n    def __init__(self, name):\n        self.name = name\n\n    def greet(self):\n        return f\"Hello, my name is {self.name}\"\n\n# Original behavior\nrobot = Robot(\"Optimus Prime\")\nprint(robot.greet())  # Output: Hello, my name is Optimus Prime\n\n# Monkey patching the greet method\ndef new_greet(self):\n    return f\"Hi, I am {self.name} and I am a robot!\"\n\nRobot.greet = new_greet\n\n# Modified behavior\nprint(robot.greet())  # Output: Hi, I am Optimus Prime and I am a robot!\n\nOutput: Hello, my name is Optimus Prime\nHi, I am Optimus Prime and I am a robot!"
        ]
    },
    {
        "question": "What is pickling ?",
        "answers": [
            "Pickling in Python is the process of converting a Python object into a byte stream, which can then be stored in a file or transmitted over a network. This process is also known as serialization. The reverse process, converting the byte stream back into a Python object, is called unpickling or deserialization.",
            "import pickle\n\n# Example object\ndata = {'name': 'Alice', 'age': 30, 'city': 'New York'}\n\n# Pickling the object\nwith open('data.pkl', 'wb') as file:\n    pickle.dump(data, file)\n\n# Unpickling the object\nwith open('data.pkl', 'rb') as file:\n    loaded_data = pickle.load(file)\n\nprint(loaded_data)  # Output: {'name': 'Alice', 'age': 30, 'city': 'New York'}\n\nOutput: {'name': 'Alice', 'age': 30, 'city': 'New York'}"
        ]
    },
    {
        "question": "Fibonacci Series:",
        "answers": [
            "Code :",
            "def fibonacci(n):\n    a, b = 0, 1\n    sequence = []\n    for _ in range(n):\n        sequence.append(a)\n        a, b = b, a + b\n    return sequence\n\nprint(fibonacci(10))\n\nOutput: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"
        ]
    },
    {
        "question": "Find Largest Number in Linked List?",
        "answers": [
            "Code:",
            "def __init__(self, data):\n        self.data = data\n        self.next = None\n\ndef find_largest(head):\n    largest = head.data\n    while head:\n        if head.data > largest:\n            largest = head.data\n        head = head.next\n    return largest\n\n# Linked list: 1 -> 5 -> 3 -> 9 -> 2\nhead = Node(1)\nhead.next = Node(5)\nhead.next.next = Node(3)\nhead.next.next.next = Node(9)\nhead.next.next.next.next = Node(2)\n\nprint(find_largest(head))\n\nError: name 'Node' is not defined"
        ]
    },
    {
        "question": "Extract Numbers from String Using Regex and Sum Them?",
        "answers": [
            "code :",
            "import re\ndef sum_numbers(s):\n    numbers = re.findall(r'\\d+', s)\n    return sum(map(int, numbers))\n\ns = \"giuwh55kdhkuw88nsbhksw51545\"\nprint(sum_numbers(s))\n\nOutput: 51688"
        ]
    },
    {
        "question": "Ip extact :",
        "answers": [
            "Code :",
            "import re\n\n# Sample ifconfig output\nifconfig_output = \"\"\"\neth0      Link encap:Ethernet  HWaddr 00:0c:29:68:22:8a  \n          inet addr:192.168.1.2  Bcast:192.168.1.255  Mask:255.255.255.0\n          inet6 addr: fe80::20c:29ff:fe68:228a/64 Scope:Link\n          inet6 addr: 2001:0db8:85a3:0000:0000:8a2e:0370:7334/64 Scope:Global\n\nwlan0     Link encap:Ethernet  HWaddr 00:0c:29:68:22:8b  \n          inet addr:192.168.1.3  Bcast:192.168.1.255  Mask:255.255.255.0\n          inet6 addr: fe80::20c:29ff:fe68:228b/64 Scope:Link\n\"\"\"\n\n# Regex patterns\nipv4_pattern = r'\\d+\\.\\d+\\.\\d+\\.\\d+'\nipv6_pattern = r'\\b(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}\\b'\n\n# Function to parse ifconfig output\ndef parse_ifconfig(output):\n    interfaces = []\n    current_interface = None\n\n    for line in output.splitlines():\n        if line:\n            if not line.startswith(' '):\n                current_interface = line.split()[0]\n                interfaces.append({'interface': current_interface, 'ipv4': [], 'ipv6': []})\n            else:\n                ipv4_matches = re.findall(ipv4_pattern, line)\n                ipv6_matches = re.findall(ipv6_pattern, line)\n                if ipv4_matches:\n                    interfaces[-1]['ipv4'].extend(ipv4_matches)\n                if ipv6_matches:\n                    interfaces[-1]['ipv6'].extend(ipv6_matches)\n    \n    return interfaces\n\n# Parse the sample ifconfig output\ninterfaces = parse_ifconfig(ifconfig_output)\n\n# Print the result\nfor interface in interfaces:\n    print(interface)\n\nOutput: {'interface': 'eth0', 'ipv4': ['192.168.1.2', '192.168.1.255', '255.255.255.0'], 'ipv6': ['2001:0db8:85a3:0000:0000:8a2e:0370:7334']}\n{'interface': 'wlan0', 'ipv4': ['192.168.1.3', '192.168.1.255', '255.255.255.0'], 'ipv6': []}"
        ]
    },
    {
        "question": "find repeating words in a text using Python?",
        "answers": [
            "Code:",
            "text = \"This is the txt txt the is txt\".split(\" \")\ndicti={}\nfor i in text:\n    if i in dicti:\n        dicti[i]+=1\n    else:\n        dicti[i]=1 \nprint(dicti)\n\nOutput: {'This': 1, 'is': 2, 'the': 2, 'txt': 3}"
        ]
    }
]
