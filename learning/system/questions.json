[
    {
        "question": "Python Questions:",
        "answers": [
            "***********************************************"
        ]
    },
    {
        "question": "Memory management in python:",
        "answers": [
            "Python Memory Management:\nPython uses two main types of memory: stack memory and heap memory.\n\nStack Memory:\nPurpose: Stack memory is used for static memory allocation. It stores local variables and function call information.\nCharacteristics: It operates in a Last-In-First-Out (LIFO) manner. When a function is called, a new stack frame is created to store its local variables and other information. Once the function returns, the stack frame is popped off, and the memory is reclaimed.\nUsage: Ideal for small, temporary data like integers and function calls.\nHeap Memory\nPurpose: Heap memory is used for dynamic memory allocation. It stores objects and data structures that need to persist beyond the scope of a single function call.\nCharacteristics: Unlike stack memory, heap memory is not organized in a specific order. It is managed by Python\u2019s memory manager and garbage collector.\nUsage: Suitable for larger collections of data, such as lists, dictionaries, and custom objects.",
            "\nReference Counting:\nMechanism: Python uses reference counting as its primary memory management technique. Each object maintains a count of how many references point to it.\nProcess: When an object\u2019s reference count drops to zero, it means the object is no longer in use, and the memory can be reclaimed.\nGarbage Collection:\nMechanism: Python\u2019s garbage collector automatically manages memory by reclaiming unused objects. It uses reference counting and cyclic garbage collection to identify and clean up unused data.\nProcess: For cyclic references, Python uses a cyclic garbage collector to detect and break these cycles.\nMemory Management Techniques\nMemory Pools:\nFunction: Python uses memory pools to manage small objects (up to 512 bytes). These pools are pre-allocated chunks of memory, divided into blocks that store objects of similar sizes.\nBenefit: This approach reduces memory fragmentation and improves allocation performance by reusing memory blocks when objects are deallocated.\nBlock Allocation:\nFunction: For larger objects (over 512 bytes), Python uses block allocation. This strategy allocates memory blocks directly from the heap.\nBenefit: It ensures efficient memory usage for large objects."
        ]
    },
    {
        "question": "What is a module in python?",
        "answers": [
            "A module is a file containing Python code. It can define functions, classes and veriables that can be reused in other python scripts using import."
        ]
    },
    {
        "question": "What is a virtual enviroment in python? Why it is used?",
        "answers": [
            "A virtual enviroment is a isolated python environment that allows you to lanage dependencies for different project indepedently.it is used to avoid conflicts between prject dependencies."
        ]
    },
    {
        "question": "List vs Tuple?",
        "answers": [
            "List:\\n\u2022 Mutable: Can be modified after creation (e.g., add/remove elements).\\n\u2022 Memory: It's slower than tuple.\\n\u2022 Syntax: Square brackets [].\\n\u2022 Example: my_list = [1, 2, 3]\\n\\nTuple:\\n\u2022 Immutable: Cannot be modified after creation.\\n\u2022 Memory: It's faster than list.\\n\u2022 Syntax: Parentheses ().\\n\u2022 Example: my_tuple = (1, 2, 3)"
        ]
    },
    {
        "question": "Deep copy vs shallow copy.",
        "answers": [
            "A shallow copy duplicates the values but keeps references to the same memory addresses, so changing the shallow copy\u2019s values affects the original object. In contrast, a deep copy duplicates the values to different memory addresses, so changes to the deep copy do not affect the original object.",
            "import copy\n\n# Original list\noriginal_list = [1, 2, [3, 4]]\n\n# Shallow copy\nshallow_copied_list = copy.copy(original_list)\n# Deep copy\ndeep_copied_list = copy.deepcopy(original_list)\n\n# Modify the nested list in the shallow copy\nshallow_copied_list[2][0] = 'shallow'\n\n# Modify the nested list in the deep copy\ndeep_copied_list[2][0] = 'deep'\n\nprint(\"Original list:\", original_list)\nprint(\"Shallow copied list:\", shallow_copied_list)\nprint(\"Deep copied list:\", deep_copied_list)\n\n"
        ]
    },
    {
        "question": "Explain recursion in python?",
        "answers": [
            "Recursion is a technique where a function calls itself. it's usefull for solving problem that can be broken down into smaller,sub-problem.",
            "def factorial(n):\n    if n==0 or n==1: \n        return 1\n    else: \n        return n*factorial(n-1)\nresult = factorial(5)\nprint(\"Factorial of 5:\",result)\n\nOutput: Factorial of 5: 120"
        ]
    },
    {
        "question": "What are *args and *kwargs?",
        "answers": [
            "In Python, we work with two main types of arguments: positional and keyword. When we want to pass multiple positional arguments, we use *args, which collects these arguments into a tuple.When we want to pass multiple keyword arguments, we use **kwargs, which collects these arguments into a dictionary.",
            "def my_function(*args, **kwargs):\n    print(\"Positional arguments (args):\")\n    for arg in args:\n        print(arg)\n    \n    print(\"\\nKeyword arguments (kwargs):\")\n    for key, value in kwargs.items():\n        print(f\"{key}: {value}\")\n\nmy_list = [1, 2, 3]\nmy_dict = {\"name\": \"Alice\", \"age\": 30}\n\nmy_function(*my_list, **my_dict)\n\nOutput: Positional arguments (args):\n1\n2\n3\n\nKeyword arguments (kwargs):\nname: Alice\nage: 30"
        ]
    },
    {
        "question": "What is a Generator?",
        "answers": [
            "A generator is a function that produce a sequence of value lazily one at a time rather than storing them all in memory at once as a list. genrator uses yeild keyword to produce the value.",
            "def generator_new(n):\n    if n % 2==0:\n        yield n\nfor i in range(5):\n    gen=generator_new(i)\n    try:\n        print(next(gen))\n    except:\n        print(\"odd\")\n\n"
        ]
    },
    {
        "question": "what is iterator?",
        "answers": [
            "An iterator iterates over an object when it is used in a loop or when the next() function is called on it.",
            "my_list = [1, 2, 3]\nfor item in my_list:\n    print(item)\n\n"
        ]
    },
    {
        "question": "What is enumerate keyword?",
        "answers": [
            "The enumerate keword is used to iterate over both the index and the value of an iterable within a loop.",
            "fruits = ['apple','banana','cherry']\nfor index, value in enumerate(fruits):\n    print(index,value)\n\nOutput: 0 apple\n1 banana\n2 cherry"
        ]
    },
    {
        "question": "What is a map function?",
        "answers": [
            "The map() function in Python is used to apply a given function to all items in an iterable (eg. a list) and returns an iterable map object. It takes a function in one or more iterables as arguments and applies the function to each corresponding element.",
            "numbers=[1,2,3,4]\nsquared = map(lambda x:x**2,numbers)\nresult = list(sqaured)\n\nError: name 'sqaured' is not defined"
        ]
    },
    {
        "question": "what is a Lambda function?",
        "answers": [
            "In python a Lambda function also known as an anonymous function is a small unnamed function defined using the Lambda keyword it is often used for short simple operations and can take multiple arguments but can only have one expression"
        ]
    },
    {
        "question": "What is a zip function?",
        "answers": [
            "The zip() function in Python is a built-in function that allows you to combine elements from multiple iterables (like lists, tuples, etc.) into tuples. It creates an iterator that aggregates elements from each of the iterables.",
            "keys = [\"name\", \"age\", \"city\"]\nvalues = [\"Alice\", 28, \"New York\"]\n\ndictionary = dict(zip(keys, values))\nprint(dictionary)  # Output: {'name': 'Alice', 'age': 28, 'city': 'New York'}\n\nOutput: {'name': 'Alice', 'age': 28, 'city': 'New York'}"
        ]
    },
    {
        "question": "What is a Decorator?",
        "answers": [
            "A decorator is a function that can modify the behaviour of another function or method. It is often used to add funtionality to function oe method dynamically.",
            "def my_decorator(func):\n    def wrapper():\n        print(\"Something is happening before the function is called.\")\n        func()\n        print(\"Something is happening after the function is called.\")\n    return wrapper\n\n@my_decorator\ndef say_hello():\n    print(\"Hello!\")\n\nsay_hello()\n\nOutput: Something is happening before the function is called.\nHello!\nSomething is happening after the function is called."
        ]
    },
    {
        "question": "What is class method and static method?",
        "answers": [
            "A static method in a class functions like a regular function and does not modify the class or instance state, nor does it take self or cls as parameters. In contrast, a class method takes cls as an argument, which refers to the class itself, allowing it to modify class-level state that applies across all instances.",
            "class MyClass:\n    class_variable = 0\n\n    def __init__(self, instance_variable):\n        self.instance_variable = instance_variable\n\n    @classmethod\n    def class_method(cls):\n        cls.class_variable += 1\n        print(f\"Class variable is now {cls.class_variable}\")\n\n    @staticmethod\n    def static_method():\n        print(\"This is a static method. It doesn't modify class or instance state.\")\n\n# Example usage\nobj1 = MyClass(1)\nobj2 = MyClass(2)\n\n# Calling class method\nMyClass.class_method()  # Output: Class variable is now 1\nobj1.class_method()     # Output: Class variable is now 2\n\n# Calling static method\nMyClass.static_method()  # Output: This is a static method. It doesn't modify class or instance state.\nobj1.static_method()     # Output: This is a static method. It doesn't modify class or instance state.\n\nOutput: Class variable is now 1\nClass variable is now 2\nThis is a static method. It doesn't modify class or instance state.\nThis is a static method. It doesn't modify class or instance state."
        ]
    },
    {
        "question": "What is a class in python ?",
        "answers": [
            "A class is a blueprint for creating objects.It defines attributes and methods that the objects will have."
        ]
    },
    {
        "question": "what is a self keyword in python ?",
        "answers": [
            "self is a reference to the instance of the class. It is used to access instance variables and methods within the class."
        ]
    },
    {
        "question": "Explain the __init__ method in python ?",
        "answers": [
            "The __init__method in python is a special method used for initilizating object. Its called when the object is created."
        ]
    },
    {
        "question": "What is super()?",
        "answers": [
            "super() is used to call a method from the parent class. its often used in child class's overridden method.",
            "class Animal:\n    def speak(self):\n        print(\"Animal speak\")\nclass Dog(Animal):\n     def speak(self):\n         super().speak()\n         print(\"Dog barks\")\n"
        ]
    },
    {
        "question": "Explain encapsulation",
        "answers": [
            "Encapsulation is the building of data and the methods that operate on that data within a single unit, i.e class. It restricts access to some of the objects components, promoting data hiding and abstraction .",
            "class Example:\n    def __init__(self):\n        self.public_var = \"I am public\"\n        self._protected_var = \"I am protected\"\n        self.__private_var = \"I am private\"\n\n    def public_method(self):\n        return \"This is a public method\"\n\n    def _protected_method(self):\n        return \"This is a protected method\"\n\n    def __private_method(self):\n        return \"This is a private method\"\n\n    def access_private_method(self):\n        return self.__private_method()\n\nexample = Example()\n\nprint(example.public_var)\nprint(example.public_method())\n\nprint(example._protected_var)\nprint(example._protected_method())\n\nprint(example.access_private_method())\n\nOutput: I am public\nThis is a public method\nI am protected\nThis is a protected method\nThis is a private method"
        ]
    },
    {
        "question": "Explain the concept of inheritance?",
        "answers": [
            "Inheritance is a mechanism where a new class inherits properties and behaviour from an existing class.It promotes code reuse and allows the creation of hierarchy classes."
        ]
    },
    {
        "question": "Polymorphism with Inheritance:",
        "answers": [
            "In Python, Polymorphism lets us define methods in the child class that have the same name as the methods in the parent class. In inheritance, the child class inherits the methods from the parent class. However, it is possible to modify a method in a child class that it has inherited from the parent class. This is particularly useful in cases where the method inherited from the parent class doesn\u2019t quite fit the child class. In such cases, we re-implement the method in the child class. This process of re-implementing a method in the child class is known as Method Overriding."
        ]
    },
    {
        "question": "What is polymorphism?",
        "answers": [
            "Polymorphism allows objects to be treated as instances of their parent class rather than actual class.It allows a single interface to represent different types of objects"
        ]
    },
    {
        "question": "How can you achieve multiple inheritance in python ?",
        "answers": [
            "Multiple inheretance is acheved when a class inherits from more than one base clas. Its done by specifying multiple class name in class defination"
        ]
    },
    {
        "question": "Explain method overridding and overloading in python.",
        "answers": [
            "Method overriding occurs when a subclass provides a method which been already implemented by super class. Method over loading is having the same method names but passing different parameters (python does not suppports method overloading ."
        ]
    },
    {
        "question": "what is abstract class in python?",
        "answers": [
            "An abstract class is a class that cannot be instantiated and typically contains abstracts methods, which are method without implementation."
        ]
    },
    {
        "question": "What is a meta class?",
        "answers": [
            "A metaclass is a class that creates classes. Classes themselves are instances of metaclasses.A metaclass in Python is a class of a class that defines how a class behaves. In other words, a metaclass is a blueprint for classes, just as a class is a blueprint for objects. Metaclasses allow you to control the creation and behavior of classes."
        ]
    },
    {
        "question": "What is monkey patching ?",
        "answers": [
            "Monkey patching is a technique in Python that allows you to modify or extend the behavior of existing modules, classes, or functions at runtime without changing the original source code. This can be particularly useful for testing, debugging, or adding temporary fixes.",
            "class Robot:\n    def __init__(self, name):\n        self.name = name\n\n    def greet(self):\n        return f\"Hello, my name is {self.name}\"\n\n# Original behavior\nrobot = Robot(\"Optimus Prime\")\nprint(robot.greet())  # Output: Hello, my name is Optimus Prime\n\n# Monkey patching the greet method\ndef new_greet(self):\n    return f\"Hi, I am {self.name} and I am a robot!\"\n\nRobot.greet = new_greet\n\n# Modified behavior\nprint(robot.greet())  # Output: Hi, I am Optimus Prime and I am a robot!\n\nOutput: Hello, my name is Optimus Prime\nHi, I am Optimus Prime and I am a robot!"
        ]
    },
    {
        "question": "What is pickling ?",
        "answers": [
            "Pickling in Python is the process of converting a Python object into a byte stream, which can then be stored in a file or transmitted over a network. This process is also known as serialization. The reverse process, converting the byte stream back into a Python object, is called unpickling or deserialization.",
            "import pickle\n\n# Example object\ndata = {'name': 'Alice', 'age': 30, 'city': 'New York'}\n\n# Pickling the object\nwith open('data.pkl', 'wb') as file:\n    pickle.dump(data, file)\n\n# Unpickling the object\nwith open('data.pkl', 'rb') as file:\n    loaded_data = pickle.load(file)\n\nprint(loaded_data)  # Output: {'name': 'Alice', 'age': 30, 'city': 'New York'}\n\nOutput: {'name': 'Alice', 'age': 30, 'city': 'New York'}"
        ]
    },
    {
        "question": "Fibonacci Series:",
        "answers": [
            "Code :",
            "def fibonacci(n):\n    a, b = 0, 1\n    sequence = []\n    for _ in range(n):\n        sequence.append(a)\n        a, b = b, a + b\n    return sequence\n\nprint(fibonacci(10))\n\nOutput: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"
        ]
    },
    {
        "question": "Palindrome Check:",
        "answers": [
            "Code :",
            "def is_palindrome(s):\n    return s == s[::-1]\n\nprint(is_palindrome(\"racecar\"))\nprint(is_palindrome(\"hello\"))\n\nOutput:\nTrue\nFalse"
        ]
    },
    {
        "question": "Prime Number Check:",
        "answers": [
            "Code :",
            "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nprint(is_prime(7))\n\nOutput:\nTrue"
        ]
    },
    {
        "question": "Sort Array Without Inbuilt Functions:",
        "answers": [
            "Code :",
            "def sort_array(arr):\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j])\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n\narr = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\nsorted_arr = sort_array(arr)\nprint(sorted_arr)\n\nOutput:\n[1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]"
        ]
    },
    {
        "question": "Remove Vowels from a String:",
        "answers": [
            "Code :",
            "def remove_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in string if char not in vowels])\n\nstring = \"Remove Vowels from a String\"\nresult = remove_vowels(string)\nprint(result)\n\nOutput:\nRmv Vwls frm  Strng"
        ]
    },
    {
        "question": "Return Sum of Even Numbers:",
        "answers": [
            "Code :",
            "def sum_of_even_numbers(numbers):\n    return sum(num for num in numbers if num % 2 == 0)\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsum_even = sum_of_even_numbers(numbers)\nprint(sum_even)\n\nOutput:\n30"
        ]
    },
    {
        "question": "Print the Pattern:",
        "answers": [
            "Code :",
            "def print_pattern():\n    pattern = [\"1\", \"12\", \"123\", \"321\", \"4321\", \"12345\"]\n    for p in pattern:\n        print(p)\n\nprint_pattern()\n\nOutput:\n1\n12\n123\n321\n4321\n12345"
        ]
    },
    {
        "question": "Count Consecutive 0s and 1s:",
        "answers": [
            "Code :",
            "def count_consecutive_elements(lst):\n    result = []\n    count = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            count += 1\n        else:\n            result.append((lst[i-1], count))\n            count = 1\n    result.append((lst[-1], count))\n    return result\n\nlst = [0, 1, 1, 0, 1, 0, 0, 1, 0, 0]\nprint(count_consecutive_elements(lst))\n\nOutput:\n[(0, 1), (1, 2), (0, 1), (1, 1), (0, 2), (1, 1), (0, 2)]"
        ]
    },
    {
        "question": "Odd or Even Without Using Modulus:",
        "answers": [
            "Code :",
            "def is_even(n):\n    return (n & 1) == 0\n\nresults = {i: \"Even\" if is_even(i) else \"Odd\" for i in range(1, 11)}\nprint(results)\n\nOutput:\n{1: 'Odd', 2: 'Even', 3: 'Odd', 4: 'Even', 5: 'Odd', 6: 'Even', 7: 'Odd', 8: 'Even', 9: 'Odd', 10: 'Even'}"
        ]
    },
    {
        "question": "Print Numbers from 1 to 10 Without Loop:",
        "answers": [
            "Code :",
            "def print_numbers(n):\n    if n > 0:\n        print_numbers(n - 1)\n        print(n)\n\nprint_numbers(10)\n\nOutput:\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10"
        ]
    },
    {
        "question": "Find Largest Number in Linked List?",
        "answers": [
            "Code:",
            "def __init__(self, data):\n        self.data = data\n        self.next = None\n\ndef find_largest(head):\n    largest = head.data\n    while head:\n        if head.data > largest:\n            largest = head.data\n        head = head.next\n    return largest\n\n# Linked list: 1 -> 5 -> 3 -> 9 -> 2\nhead = Node(1)\nhead.next = Node(5)\nhead.next.next = Node(3)\nhead.next.next.next = Node(9)\nhead.next.next.next.next = Node(2)\n\nprint(find_largest(head))\n\n"
        ]
    },
    {
        "question": "Extract Numbers from String Using Regex and Sum Them?",
        "answers": [
            "code :",
            "import re\ndef sum_numbers(s):\n    numbers = re.findall(r'\\d+', s)\n    return sum(map(int, numbers))\n\ns = \"giuwh55kdhkuw88nsbhksw51545\"\nprint(sum_numbers(s))\n\nOutput: 51688"
        ]
    },
    {
        "question": "Ip extact :",
        "answers": [
            "Code :",
            "import re\n\n# Sample ifconfig output\nifconfig_output = \"\"\"\neth0      Link encap:Ethernet  HWaddr 00:0c:29:68:22:8a  \n          inet addr:192.168.1.2  Bcast:192.168.1.255  Mask:255.255.255.0\n          inet6 addr: fe80::20c:29ff:fe68:228a/64 Scope:Link\n          inet6 addr: 2001:0db8:85a3:0000:0000:8a2e:0370:7334/64 Scope:Global\n\nwlan0     Link encap:Ethernet  HWaddr 00:0c:29:68:22:8b  \n          inet addr:192.168.1.3  Bcast:192.168.1.255  Mask:255.255.255.0\n          inet6 addr: fe80::20c:29ff:fe68:228b/64 Scope:Link\n\"\"\"\n\n# Regex patterns\nipv4_pattern = r'\\d+\\.\\d+\\.\\d+\\.\\d+'\nipv6_pattern = r'\\b(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}\\b'\n\n# Function to parse ifconfig output\ndef parse_ifconfig(output):\n    interfaces = []\n    current_interface = None\n\n    for line in output.splitlines():\n        if line:\n            if not line.startswith(' '):\n                current_interface = line.split()[0]\n                interfaces.append({'interface': current_interface, 'ipv4': [], 'ipv6': []})\n            else:\n                ipv4_matches = re.findall(ipv4_pattern, line)\n                ipv6_matches = re.findall(ipv6_pattern, line)\n                if ipv4_matches:\n                    interfaces[-1]['ipv4'].extend(ipv4_matches)\n                if ipv6_matches:\n                    interfaces[-1]['ipv6'].extend(ipv6_matches)\n    \n    return interfaces\n\n# Parse the sample ifconfig output\ninterfaces = parse_ifconfig(ifconfig_output)\n\n# Print the result\nfor interface in interfaces:\n    print(interface)\n\nOutput: {'interface': 'eth0', 'ipv4': ['192.168.1.2', '192.168.1.255', '255.255.255.0'], 'ipv6': ['2001:0db8:85a3:0000:0000:8a2e:0370:7334']}\n{'interface': 'wlan0', 'ipv4': ['192.168.1.3', '192.168.1.255', '255.255.255.0'], 'ipv6': []}"
        ]
    },
    {
        "question": "Find repeating words in a text using Python?",
        "answers": [
            "Code:",
            "text = \"This is the txt txt the is txt\".split(\" \")\ndicti={}\nfor i in text:\n    if i in dicti:\n        dicti[i]+=1\n    else:\n        dicti[i]=1 \nprint(dicti)\n\nOutput: {'This': 1, 'is': 2, 'the': 2, 'txt': 3}"
        ]
    },
    {
        "question": "How to use subprocess?",
        "answers": [
            "Subprocess is a librery which run commands on same system.",
            "import subprocess\n\ndef run_command():\n    # Run a simple command and capture output\n    result = subprocess.run(['ls', '-l'], capture_output=True, text=True)\n    print(\"Output of 'ls -l':\")\n    print(result.stdout)\n\n    # Run a command with error handling\n    try:\n        result = subprocess.run(['ls', '-l', '/nonexistent'], check=True, capture_output=True, text=True)\n    except subprocess.CalledProcessError as e:\n        print(\"Error running 'ls -l /nonexistent':\")\n        print(e)\n\n    # Start a process and get output and error\n    process = subprocess.Popen(['ls', '-l'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n    stdout, stderr = process.communicate()\n    print(\"Output from Popen:\")\n    print(stdout)\n    print(\"Error from Popen:\")\n    print(stderr)\n\n    # Redirect output to a file\n    with open('output.txt', 'w') as f:\n        subprocess.run(['ls', '-l'], stdout=f)\n    print(\"Output redirected to 'output.txt'\")\n\nif __name__ == \"__main__\":\n    run_command()\n\nOutput: (no output)"
        ]
    },
    {
        "question": "How to use paramiko ?",
        "answers": [
            "Paramiko is used to run commands in another system.",
            "import paramiko\n\ndef run_paramiko():\n    # Create an SSH client\n    client = paramiko.SSHClient()\n    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n\n    # Connect to the server\n    try:\n        client.connect('your_server_ip', username='your_username', password='your_password')\n        print(\"Connected to the server\")\n\n        # Execute a command\n        stdin, stdout, stderr = client.exec_command('ls -l')\n        print(\"Output of 'ls -l':\")\n        print(stdout.read().decode())\n\n        # Handle errors\n        stdin, stdout, stderr = client.exec_command('ls -l /nonexistent')\n        error = stderr.read().decode()\n        if error:\n            print(\"Error running 'ls -l /nonexistent':\")\n            print(error)\n\n        # Transfer files using SFTP\n        sftp = client.open_sftp()\n        sftp.put('local_file.txt', 'remote_file.txt')\n        sftp.get('remote_file.txt', 'downloaded_file.txt')\n        sftp.close()\n        print(\"File transfer completed\")\n\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n    finally:\n        client.close()\n        print(\"Connection closed\")\n\nif __name__ == \"__main__\":\n    run_paramiko()\n\nError: No module named 'paramiko'"
        ]
    },
    {
        "question": "Write a basic unittest with selenium :",
        "answers": [
            "Here is the basic test to open google.com",
            "import unittest\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\nclass GoogleSearchTest(unittest.TestCase):\n\n    def setUp(self):\n        # Set up the WebDriver (e.g., Chrome)\n        self.driver = webdriver.Chrome()\n\n    def test_google_search(self):\n        driver = self.driver\n        driver.get(\"https://www.google.com\")\n        \n        # Find the search box using its name attribute value\n        search_box = driver.find_element(By.NAME, \"q\")\n        \n        # Enter search text and submit\n        search_box.send_keys(\"Selenium testing\")\n        search_box.send_keys(Keys.RETURN)\n        \n        # Explicit wait for the results to be displayed\n        WebDriverWait(driver, 10).until(\n            EC.presence_of_element_located((By.CSS_SELECTOR, \"div.g\"))\n        )\n        \n        # Check if results are displayed\n        self.assertIn(\"Selenium testing\", driver.title)\n        results = driver.find_elements(By.CSS_SELECTOR, \"div.g\")\n        self.assertGreater(len(results), 0, \"No results found.\")\n\n    def tearDown(self):\n        # Close the browser window\n        self.driver.quit()\n\nif __name__ == \"__main__\":\n    unittest.main()\n\n"
        ]
    },
    {
        "question": "Implicit Wait vs Explicit Wait?",
        "answers": [
            "Implicit Wait: \n\u2022 WebDriver waits for a specified time for an element before throwing an exception. \n\u2022 Applies to all elements globally in the script. \n\u2022 Example: driver.implicitly_wait(10) Explicit Wait: \n\u2022 WebDriver waits for a specific condition (e.g., element being clickable). \n\u2022 Targeted to specific elements. \n\u2022 Example: element = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, 'submit')))"
        ]
    },
    {
        "question": "XPath vs CSS Selector?",
        "answers": [
            "XPath: \n\u2022 Can navigate through elements in an XML structure. \n\u2022 Example: element = driver.find_element_by_xpath(\"//tag[contains(text(), 'partial text')]\") CSS Selector: \n\u2022 Generally faster and preferred for locating elements based on style attributes. \n\u2022 Example: element = driver.find_element_by_css_selector(\"div#content\")"
        ]
    },
    {
        "question": "Page Object Model (POM)?",
        "answers": [
            "A design pattern in Selenium that creates an object repository for storing all web elements. It improves code maintenance and reduces code duplication by representing UI elements as objects."
        ]
    },
    {
        "question": "Handling Iframes in Selenium?",
        "answers": [
            "from selenium import webdriver # Set up the WebDriver \ndriver = webdriver.Chrome() \ndriver.get('URL_OF_YOUR_PAGE') # Switch to the iframe driver.switch_to.frame('iframe_id_or_name') # Perform actions inside the iframe element = driver.find_element_by_id('element_id') \nelement.click() # Switch back to the main content driver.switch_to.default_content() # Close the WebDriver driver.quit()\n\n"
        ]
    },
    {
        "question": "How we can run javascript in selenium?",
        "answers": [
            "from selenium import webdriver\n\n# Set up the WebDriver (e.g., Chrome)\ndriver = webdriver.Chrome()\n\n# Open a webpage\ndriver.get(\"https://www.example.com\")\n\n# Execute a simple JavaScript command to get the page title\ntitle = driver.execute_script(\"return document.title;\")\nprint(\"Page title is:\", title)\n\n# Close the browser\ndriver.quit()\n\n"
        ]
    },
    {
        "question": "Linux Questions:",
        "answers": [
            "***********************************************"
        ]
    },
    {
        "question": "What is the difference between a hard link and a soft link?",
        "answers": [
            "A hard link is a direct reference to the physical data on a disk, meaning multiple filenames can point to the same data. Deleting one hard link does not delete the data as long as another hard link exists. A soft link (or symbolic link) is a pointer to another file or directory. Deleting the original file breaks the soft link.",
            "To create a hard link: `ln original_file hard_link_name`\nTo create a soft link: `ln -s target_file link_name`"
        ]
    },
    {
        "question": "How do users create a symbolic link in Linux?",
        "answers": [
            "Users can create a symbolic link in Linux using the `ln` command with the `-s` option. This creates a soft link that points to another file or directory.",
            "Command: `ln -s target_file link_name`"
        ]
    },
    {
        "question": "What is the difference between a process and a thread?",
        "answers": [
            "A process is an independent program in execution with its own memory space, while a thread is a smaller unit of a process that shares the same memory space with other threads in the same process. Processes are isolated, whereas threads within the same process can communicate directly.",
            "Processes require more resources and time for context switching compared to threads, which are lighter and faster."
        ]
    },
    {
        "question": "What is RAID in Linux? What are the basic RAID types?",
        "answers": [
            "RAID (Redundant Array of Independent Disks) is a technology that combines multiple disk drives into a single unit to improve performance and provide data redundancy. Basic RAID types include RAID 0 (striping), RAID 1 (mirroring), RAID 5 (striping with parity), and RAID 6 (striping with double parity).",
            "RAID 0: No redundancy, improved performance.\nRAID 1: Mirroring, data redundancy.\nRAID 5: Striping with parity, balanced performance and redundancy.\nRAID 6: Striping with double parity, higher redundancy."
        ]
    },
    {
        "question": "What is the /proc file system?",
        "answers": [
            "The /proc file system is a virtual file system in Linux that provides a mechanism to access process and system information. It contains runtime system information (e.g., system memory, devices mounted, hardware configuration) and allows users to interact with the kernel.",
            "It is often referred to as a process information pseudo-file system and does not contain 'real' files but runtime system information."
        ]
    },
    {
        "question": "What is your idea about the kernel? What is it?",
        "answers": [
            "The kernel is the core component of an operating system, managing system resources, hardware, and communication between software and hardware. It handles memory management, process management, device drivers, and system calls.",
            "In Linux, the kernel is responsible for managing the system's operations and ensuring efficient resource usage."
        ]
    },
    {
        "question": "How to use the sed command to replace words?",
        "answers": [
            "The `sed` command in Linux is used to find and replace text in files. It can perform basic text manipulations and supports regular expressions for complex patterns.",
            "Command: `sed -i 's/old_word/new_word/g' filename`"
        ]
    },
    {
        "question": "Testing Questions:",
        "answers": [
            "***********************************************"
        ]
    },
    {
        "question": "What are the different types of software testing?",
        "answers": [
            "Software testing can be broadly categorized into Functional Testing and Non-Functional Testing.",
            "Functional Testing includes Unit Testing, Integration Testing, System Testing, and Acceptance Testing.",
            "Non-Functional Testing includes Performance Testing, Security Testing, Usability Testing, and Compatibility Testing."
        ]
    },
    {
        "question": "What are the Different Phases of the Software Testing Life Cycle?",
        "answers": [
            "The Software Testing Life Cycle (STLC) consists of the following phases:",
            "1. Requirement Analysis",
            "2. Test Planning",
            "3. Test Case Development",
            "4. Test Environment Setup",
            "5. Test Execution",
            "6. Test Cycle Closure"
        ]
    },
    {
        "question": "Explain SDLC?",
        "answers": [
            "The Software Development Life Cycle (SDLC) is a process used by software industry to design, develop and test high-quality software.",
            "The SDLC phases include: Planning, Analysis, Design, Implementation, Testing, Deployment, and Maintenance."
        ]
    },
    {
        "question": "What is Agile?",
        "answers": [
            "Agile is a project management and software development methodology that focuses on iterative development, where requirements and solutions evolve through collaboration between self-organizing cross-functional teams.",
            "Agile promotes flexible responses to change and continuous improvement."
        ]
    },
    {
        "question": "What is the difference between priority and severity?",
        "answers": [
            "Priority refers to the order in which a defect should be fixed, based on its impact on the project schedule.",
            "Severity refers to the impact a defect has on the functionality of the application."
        ]
    },
    {
        "question": "What do you mean by Quality Assurance (QA)?",
        "answers": [
            "Quality Assurance (QA) is a systematic process to determine whether a product or service meets specified requirements.",
            "QA focuses on improving the processes to deliver Quality Products to the customer."
        ]
    },
    {
        "question": "What is performance testing, load testing, and stress testing?",
        "answers": [
            "Performance Testing is a type of testing to ensure software applications will perform well under their expected workload.",
            "Load Testing is a type of performance testing to check the system's behavior under normal and peak conditions.",
            "Stress Testing is a type of performance testing to evaluate a system's robustness and error handling under extreme conditions."
        ]
    },
    {
        "question": "How do you plan the test cases?",
        "answers": [
            "Planning test cases involves the following steps:",
            "1. Analyze the requirements.",
            "2. Define test objectives.",
            "3. Design test cases.",
            "4. Review and baseline test cases.",
            "5. Execute test cases and log defects.",
            "6. Retest and close defects."
        ]
    },
    {
        "question": "What is the difference between Black Box Testing and White Box Testing?",
        "answers": [
            "Black Box Testing is a testing approach where the tester does not have knowledge of the internal structure or code of the application. It focuses on testing the functionality of the software based on the requirements.",
            "White Box Testing, also known as Clear Box Testing, involves testing the internal structures or workings of an application. The tester has knowledge of the code and can test the paths, branches, and conditions within the code."
        ]
    },
    {
        "question": "What is the difference between Sanity Testing and Regression Testing?",
        "answers": [
            "Sanity Testing is a subset of regression testing. It is performed to verify that a specific section of the application is still working after a minor change or bug fix. It is a quick, narrow, and focused test.",
            "Regression Testing is a comprehensive testing approach that ensures that recent code changes have not adversely affected existing functionalities. It involves re-running previously completed tests to check if the existing functionalities work as expected."
        ]
    },
    {
        "question": "What is the Difference Between Functional and Non-functional Testing?",
        "answers": [
            "Functional Testing verifies that the software performs its intended functions correctly, focusing on features and interactions. It is based on customer requirements and includes tests like Unit Testing, Integration Testing, System Testing, and Acceptance Testing.",
            "Non-functional Testing assesses overall performance, usability, and quality attributes like speed, security, and reliability. It is based on customer expectations and includes tests like Performance Testing, Security Testing, Usability Testing, and Compatibility Testing."
        ]
    },
    {
        "question": "What do you fill when you create a Jira issue, and why do we give that?",
        "answers": [
            "When creating a Jira issue, you typically fill in the following fields:",
            "1. **Summary**: A brief title of the issue.",
            "2. **Description**: Detailed information about the issue, including steps to reproduce, expected vs. actual results.",
            "3. **Issue Type**: Specifies whether it's a bug, task, story, etc.",
            "4. **Priority**: Indicates the urgency of the issue.",
            "5. **Assignee**: The person responsible for resolving the issue.",
            "6. **Reporter**: The person who reported the issue.",
            "7. **Attachments**: Screenshots or files related to the issue.",
            "These fields help in clearly communicating the issue to the development team, ensuring it is tracked, prioritized, and resolved efficiently."
        ]
    },
    {
        "question": "What's the difference between negative and positive testing?",
        "answers": [
            "Positive Testing checks if the application works as expected with valid input data. It aims to verify that the software does what it is supposed to do.",
            "Negative Testing checks how the application handles invalid input or unexpected user behavior. It aims to ensure the software can gracefully handle errors and edge cases."
        ]
    },
    {
        "question": "What elements do you include in a bug report?",
        "answers": [
            "A well-structured bug report typically includes the following elements:",
            "1. **Title**: A concise summary of the bug.",
            "2. **Description**: Detailed information about the bug, including steps to reproduce, expected vs. actual results.",
            "3. **Steps to Reproduce**: A step-by-step guide to replicate the issue.",
            "4. **Expected Result**: What should happen if the software works correctly.",
            "5. **Actual Result**: What actually happens when the bug occurs.",
            "6. **Environment Details**: Information about the software and hardware environment where the bug was found (e.g., OS, browser version).",
            "7. **Severity and Priority**: The impact of the bug and its urgency.",
            "8. **Attachments**: Screenshots, logs, or any other relevant files."
        ]
    },
    {
        "question": "How many test plans can you make for a simple add function passing 2 arguments?",
        "answers": [
            "For a simple add function that takes two arguments, you can create several test plans to cover different scenarios:",
            "1. **Positive Tests**: Test with positive integers (e.g., add(2, 3)).",
            "2. **Negative Tests**: Test with negative integers (e.g., add(-2, -3)).",
            "3. **Zero Tests**: Test with zero (e.g., add(0, 5) and add(5, 0)).",
            "4. **Mixed Sign Tests**: Test with one positive and one negative integer (e.g., add(2, -3)).",
            "5. **Large Numbers**: Test with large integers to check for overflow issues (e.g., add(1000000, 2000000)).",
            "6. **Boundary Tests**: Test with boundary values (e.g., add(Integer.MAX_VALUE, 1)).",
            "7. **Non-integer Inputs**: Test with non-integer inputs if the function should handle them (e.g., add(2.5, 3.5))."
        ]
    },
    {
        "question": "What is API Testing, Models, Admin, and Types of APIs?",
        "answers": [
            "API Testing involves testing Application Programming Interfaces (APIs) directly and as part of integration testing to determine if they meet expectations for functionality, reliability, performance, and security.",
            "Models in API testing refer to the data structures that APIs use to communicate. These models define the format of the data exchanged between the client and server.",
            "Admin in the context of APIs typically refers to the administrative tasks involved in managing APIs, such as setting up API keys, monitoring usage, and managing access controls.",
            "Types of APIs include:",
            "1. **Open APIs**: Publicly available APIs that can be used by any developer.",
            "2. **Internal APIs**: Private APIs used within an organization to connect systems and data.",
            "3. **Partner APIs**: APIs shared with specific business partners to facilitate integration.",
            "4. **Composite APIs**: APIs that combine multiple data or service APIs."
        ]
    },
    {
        "question": "General Questions:",
        "answers": [
            "***********************************************"
        ]
    },
    {
        "question": "Tell me about yourself?",
        "answers": [
            "I have over 4 years of experience working as a manual tester, automation tester, and developer in Python at YYY. My current project involves client and server platform validation for a client named XYXXXX. I handle tasks from documentation provided by the client, which are created as Jira tickets by the team lead. These tasks are prioritized based on severity and priority, and we follow a sprint-based approach with regular updates to leads and clients.",
            "I develop high-priority test cases initially, based on client-provided documentation. The duration for developing test cases varies, and I can complete 3 to 6 test cases per day depending on their priority. We use server platform boards provided by the client, which include components and drivers related to media, power delivery, and network. I develop scripts to test these scenarios, collect logs, and update Jira tickets with the results.",
            "After developing the code, I test it, collect logs, and push the code to GitHub for review by leads and clients. Any comments are addressed, and the code is updated accordingly. Once approved, the code is merged into the main branch and cloned to the server platform for execution by the testing team. If any issues arise, I debug and resolve them before pushing the final code to the main branch. The Jira ticket is then updated to resolved and closed by the client."
        ]
    },
    {
        "question": "How do you handle failures?",
        "answers": [
            "When handling failures, I follow a systematic approach:",
            "1. **Identify the Issue**: Analyze logs and error messages to pinpoint the root cause of the failure.",
            "2. **Reproduce the Issue**: Try to replicate the failure in a controlled environment to understand its behavior.",
            "3. **Debug and Fix**: Use debugging tools and techniques to fix the issue. This may involve modifying the code, updating test scripts, or adjusting configurations.",
            "4. **Test the Fix**: Run tests to ensure the fix resolves the issue without introducing new problems.",
            "5. **Document the Solution**: Update documentation and Jira tickets with details of the issue and the solution implemented.",
            "6. **Communicate**: Keep stakeholders informed about the issue, the steps taken to resolve it, and any potential impacts on the project timeline."
        ]
    },
    {
        "question": "What are all the challenges you faced?",
        "answers": [
            "Throughout my career, I have faced several challenges, including:",
            "1. **Flaky Tests**: Dealing with tests that pass or fail intermittently. I addressed this by improving synchronization and stabilizing the test environment.",
            "2. **Test Maintenance**: Keeping automated test scripts up-to-date with evolving application features. I used a modular approach and regular refactoring to manage this.",
            "3. **Integration with CI/CD**: Ensuring seamless integration of automated tests with the CI/CD pipeline. I collaborated with the DevOps team to achieve this.",
            "4. **Performance Testing**: Conducting performance tests and analyzing results required learning new tools like JMeter. I successfully identified and resolved performance bottlenecks.",
            "5. **Communication**: Effectively communicating issues and solutions to non-technical stakeholders. I improved my communication skills to ensure clear and concise updates."
        ]
    }
    
    

]
